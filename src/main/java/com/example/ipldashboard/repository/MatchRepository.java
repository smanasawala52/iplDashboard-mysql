package com.example.ipldashboard.repository;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.example.ipldashboard.model.ICity;
import com.example.ipldashboard.model.ITeamCount;
import com.example.ipldashboard.model.IVenueCount;
import com.example.ipldashboard.model.Match;

@Repository
public interface MatchRepository extends JpaRepository<Match, Long> {
	@Query("SELECT c.team1 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team1 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team1 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team1 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team1 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team1 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team1 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c GROUP BY c.team1 ORDER BY c.team1")
	List<ITeamCount> countTotalMatchesByTeam1();
	@Query("SELECT c.team2 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team2 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team2 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team2 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team2 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team2 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team2 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c GROUP BY c.team2 ORDER BY c.team2")
	List<ITeamCount> countTotalMatchesByTeam2();

	@Query("SELECT c.team1 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team1 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team1 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team1 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team1 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team1 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team1 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c where c.team1=:team1 GROUP BY c.team1 ORDER BY c.team1")
	List<ITeamCount> countTotalMatchesByTeam1(String team1);
	@Query("SELECT c.team2 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team2 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team2 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team2 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team2 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team2 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team2 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c where c.team2=:team2 GROUP BY c.team2 ORDER BY c.team2")
	List<ITeamCount> countTotalMatchesByTeam2(String team2);

	@Query("SELECT c.team1 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team1 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team1 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team1 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team1 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team1 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team1 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c where c.team1=:team1 and c.venue=:venue GROUP BY c.team1 ORDER BY c.team1")
	List<ITeamCount> countTotalMatchesByTeam1AndVenue(String team1,
			String venue);
	@Query("SELECT c.team2 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team2 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team2 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team2 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team2 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team2 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team2 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c where c.team2=:team2 and c.venue=:venue GROUP BY c.team2 ORDER BY c.team2")
	List<ITeamCount> countTotalMatchesByTeam2AndVenue(String team2,
			String venue);

	@Query("SELECT c.team1 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team1 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team1 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team1 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team1 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team1 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team1 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c where c.team1=:team1 and c.team2=:team2 GROUP BY c.team1 ORDER BY c.team1")
	List<ITeamCount> countTotalMatchesByTeam1AndTeam2(String team1,
			String team2);
	@Query("SELECT c.team2 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team2 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team2 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team2 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team2 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team2 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team2 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c where c.team1=:team1 and c.team2=:team2 GROUP BY c.team2 ORDER BY c.team2")
	List<ITeamCount> countTotalMatchesByTeam2AndTeam1(String team1,
			String team2);

	@Query("SELECT c.team1 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team1 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team1 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team1 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team1 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team1 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team1 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team1 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c where c.team1=:team1 and c.team2=:team2 and c.venue=:venue GROUP BY c.team1 ORDER BY c.team1")
	List<ITeamCount> countTotalMatchesByTeam1AndTeam2AndVenue(String team1,
			String team2, String venue);
	@Query("SELECT c.team2 as teamName, COUNT(c.id) as totalMatches, sum(case when c.winner=c.team2 then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossWinner=c.team2 then 1 else 0 end) AS totalTossWins, sum(case when c.tossWinner=c.team2 and c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when c.tossWinner=c.team2 and c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when (c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field') then 1 else 0 end) AS totalBatFirst, sum(case when (c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field') then 1 else 0 end) AS totalFieldFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team2 and c.tossDecision='bat') OR (c.tossWinner=c.team1 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.team2 and ((c.tossWinner=c.team1 and c.tossDecision='bat') OR (c.tossWinner=c.team2 and c.tossDecision='field')) then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.winner=c.team2 and c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.winner=c.team2 and c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c where c.team1=:team1 and c.team2=:team2 and c.venue=:venue GROUP BY c.team2 ORDER BY c.team2")
	List<ITeamCount> countTotalMatchesByTeam2AndTeam1AndVenue(String team1,
			String team2, String venue);

	@Query("SELECT c.venue as venueName, c.city as city, COUNT(c.id) as totalMatches, sum(case when c.result='runs' OR c.result='wickets' then 1 else 0 end) AS totalWins, sum(case when c.result='tie'   then 1 else 0 end) AS totalTies, sum(case when c.result='NA'    then 1 else 0 end) AS totalNoResult, sum(case when c.tossDecision='bat' then 1 else 0 end) AS totalTossWinBatFirst, sum(case when  c.tossDecision='field' then 1 else 0 end) AS totalTossWinFieldFirst, sum(case when c.winner=c.tossWinner and c.tossDecision='bat' then 1 else 0 end) AS totalWinsBatFirst, sum(case when c.winner=c.tossWinner and c.tossDecision='field' then 1 else 0 end) AS totalWinsFieldFirst, sum(case when c.result='runs' then 1 else 0 end) AS totalWinsByRuns, sum(case when c.result='wickets' then 1 else 0 end) AS totalWinsByWikets FROM Match AS c GROUP BY c.venue,c.city ORDER BY c.venue,c.city")
	List<IVenueCount> countTotalMatchesByVenue();

	@Query("SELECT team1 as team1, team2 as team2 FROM Match where city != 'NA' and venue=:venue order by team1, team2")
	List<ICity> getTeam1ByVenueOrderByTeam1(String venue);

	Page<Match> getByTeam1OrTeam2OrderByDateDesc(String team1, String team2,
			Pageable p);
	Page<Match> getByOrderByDateDesc(Pageable p);

	Page<Match> getByVenueOrderByDateDesc(String venue, Pageable p);
	Page<Match> getByVenueAndTeam1OrVenueAndTeam2OrderByDateDesc(String venue,
			String team1, String venue2, String team2, Pageable p);

	Page<Match> getByTeam1AndTeam2OrTeam2AndTeam1OrderByDateDesc(String team1,
			String team2, String team3, String team4, Pageable p);
	Page<Match> getByVenueAndTeam1AndTeam2OrVenueAndTeam2AndTeam1OrderByDateDesc(
			String venue, String team1, String team2, String venue1,
			String team3, String team4, Pageable p);

	@Query("select DISTINCT(venue) as venues from Match where city != 'NA' AND ((team1=:team1) OR (team2=:team2))")
	List<String> findCity(String team1, String team2);

	@Query("select DISTINCT(venue) as venues from Match where city != 'NA' AND ((team1=:team1 AND team2=:team2) OR (team1=:team3 AND team2=:team4))")
	List<String> findCity(String team1, String team2, String team3,
			String team4);
}
